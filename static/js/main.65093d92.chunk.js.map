{"version":3,"sources":["utils/getRpcUrl.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","contexts/BlockContext.tsx","utils/addressHelpers.ts","config/constants/contracts.ts","config/constants/pools.ts","config/constants/farms.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","utils/multicall.ts","state/farms/fetchFarms.ts","state/farms/index.ts","state/pools/fetchPools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","state/hooks.ts","style/Global.tsx","components/PageLoader.tsx","App.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["nodes","process","getNodeUrl","randomIndex","random","length","defaultTranslationState","translations","setTranslations","TranslationsContext","createContext","Container","styled","div","theme","mediaQueries","sm","Page","lg","QuoteToken","PoolCategory","BlockContext","React","BlockContextProvider","children","previousBlock","useRef","useState","block","setBlock","useEffect","web3","getWeb3","interval","setInterval","a","eth","getBlockNumber","blockNumber","current","clearInterval","Provider","value","getCakeAddress","addresses","cake","chainId","getMasterChefAddress","masterChef","getMulticallAddress","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","56","97","busd","pools","sousId","tokenName","stakingTokenName","MOMO","stakingTokenAddress","contractAddress","poolCategory","CORE","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","tokenDecimals","farms","pid","risk","lpSymbol","lpAddresses","tokenSymbol","tokenAddresses","quoteTokenSymbol","BUSD","quoteTokenAdresses","contracts","BNB","isTokenOnly","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","prev","useRefresh","useContext","fastRefresh","slowRefresh","multicall","abi","calls","multi","Contract","MultiCallAbi","itf","Interface","calldata","map","call","address","toLowerCase","encodeFunctionData","name","params","methods","aggregate","returnData","res","i","decodeFunctionResult","fetchFarms","Promise","all","farmsConfig","farmConfig","lpAdress","CHAIN_ID","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","quoteTokenDecimals","tokenAmount","BigNumber","pow","tokenPriceVsQuote","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","info","totalAllocPoint","momoPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","farm","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchPoolsBlockLimits","poolsWithEnd","poolsConfig","filter","p","callsStartBlock","poolConfig","callsEndBlock","sousChefABI","starts","ends","cakePoolConfig","startBlock","endBlock","fetchPoolsTotalStatking","nonBnbPools","bnbPool","callsNonBnbPools","callsBnbPools","cakeABI","nonBnbPoolsTotalStaked","wbnbABI","bnbPoolsTotalStaked","totalStaked","masterChefABI","PoolsSlice","setPoolsPublicData","livePoolsData","pool","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","useFetchPublicData","dispatch","useDispatch","blockLimits","totalStakings","console","log","liveData","blockLimit","totalStaking","GlobalStyle","createGlobalStyle","colors","background","Wrapper","PageLoader","src","alt","width","height","Ifos","lazy","NotFound","config","EXPONENTIAL_AT","DECIMAL_PLACES","App","useWallet","account","connect","window","localStorage","getItem","Global","id","className","fallback","path","exact","component","memo","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","light","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout"],"mappings":"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","file":"static/js/main.65093d92.chunk.js","sourcesContent":["import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1200px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: Address\n  name: string\n  token: string\n  maxContribution: string\n  minContribution: string\n  subTitle?: string\n  description?: string\n  saleAmount: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'MOMO' = 'MOMO',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","export default {\n  cake: {\n    56: '0xB37BB601005cD5C2FCd4ea526dba0f67f28F7C6B',\n    97: '0x1b763d27b5ea4fc0e30c145cbdc36f1d074595bf',\n  },\n  masterChef: {\n    56: '0x9572923F4DD78f337377e9657bE75fC7d87762d1',\n    97: '',\n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '',\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n  },\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  {\n    sousId: 1,\n    tokenName: 'SLIME',\n    stakingTokenName: QuoteToken.MOMO,\n    stakingTokenAddress: '0xafb2997fe9a99022e61c7e01b974e0e3d7704b02',\n    contractAddress: {\n      97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n      56: '0x890A8a1d5e3cF7ec6e42a1E76d9e6a0896b0e49d',\n    },\n    poolCategory: PoolCategory.CORE,\n    projectLink: 'https://slime.finance/',\n    harvest: true,\n    tokenPerBlock: '0.000677',\n    sortOrder: 1,\n    isFinished: false,\n    tokenDecimals: 18,\n  },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'BRY',\n  //   stakingTokenName: QuoteToken.BRY,\n  //   stakingTokenAddress: '0xafb2997fe9a99022e61c7e01b974e0e3d7704b02',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0x890A8a1d5e3cF7ec6e42a1E76d9e6a0896b0e49d',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://slime.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '0.000677',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'MOMO-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x2C4415cA5F77BF33911a481FdB9Fd9987246c23C',\n    },\n    tokenSymbol: 'MOMO',\n    tokenAddresses: {\n      97: '',\n      56: '0xAFb2997fE9a99022E61C7e01B974E0e3D7704B02',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'MOMO-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0xfd0fE39Fe5aD487219d3e7cAFad1b1C425C725B6',\n    },\n    tokenSymbol: 'MOMO',\n    tokenAddresses: {\n      97: '',\n      56: '0xAFb2997fE9a99022E61C7e01B974E0e3D7704B02',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 2,\n    risk: 3,\n    lpSymbol: 'BNB-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\n    },\n    tokenSymbol: 'BNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  // {\n  //   pid: 3,\n  //   risk: 1,\n  //   lpSymbol: 'USDT-BUSD LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd',\n  //   },\n  //   tokenSymbol: 'USDT',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x55d398326f99059ff775485246999027b3197955',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 4,\n  //   risk: 2,\n  //   lpSymbol: 'BTCB-BNB LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x7561eee90e24f3b348e1087a005f78b4c8453524',\n  //   },\n  //   tokenSymbol: 'BTCB',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n  // {\n  //   pid: 5,\n  //   risk: 2,\n  //   lpSymbol: 'ETH-BNB LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x70d8929d04b60af4fb9b58713ebcf18765ade422',\n  //   },\n  //   tokenSymbol: 'ETH',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n  // {\n  //   pid: 6,\n  //   risk: 1,\n  //   lpSymbol: 'DAI-BUSD LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x3ab77e40340ab084c3e23be8e5a6f7afed9d41dc',\n  //   },\n  //   tokenSymbol: 'DAI',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 7,\n  //   risk: 1,\n  //   lpSymbol: 'USDC-BUSD LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x680dd100e4b394bda26a59dd5c119a391e747d18',\n  //   },\n  //   tokenSymbol: 'USDC',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 9,\n  //   risk: 3,\n  //   lpSymbol: 'DOT-BNB LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xbcd62661a6b1ded703585d3af7d7649ef4dcdb5c',\n  //   },\n  //   tokenSymbol: 'DOT',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n  // {\n  //   pid: 10,\n  //   risk: 4,\n  //   lpSymbol: 'CAKE-BUSD LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458',\n  //   },\n  //   tokenSymbol: 'CAKE',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 11,\n  //   risk: 4,\n  //   lpSymbol: 'CAKE-BNB LP',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xa527a61703d82139f8a06bc30097cc9caa2df5a6',\n  //   },\n  //   tokenSymbol: 'CAKE',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n {\n    pid: 3,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'MOMO',\n    lpAddresses: {\n      97: '',\n      56: '0x2C4415cA5F77BF33911a481FdB9Fd9987246c23C', // MOMO-BUSD LP\n    },\n    tokenSymbol: 'MOMO',\n    tokenAddresses: {\n      97: '',\n      56: '0xAFb2997fE9a99022E61C7e01B974E0e3D7704B02',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 4,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'SLIME',\n    lpAddresses: {\n      97: '',\n      56: '0x51aeb3Fe3Dbe412DAcDdA102C9D7E541f584A3bF', // SLIME-BUSD LP\n    },\n    tokenSymbol: 'SLIME',\n    tokenAddresses: {\n      97: '',\n      56: '0x23b06097f8fe2dd9d3df094d3ee8319daa8756c1',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 4,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'BRY',\n    lpAddresses: {\n      97: '',\n      56: '0x5E3CD27F36932Bc0314aC4e2510585798C34a2fC', // BRY-BNB LP\n    },\n    tokenSymbol: 'BRY',\n    tokenAddresses: {\n      97: '',\n      56: '0xf859Bf77cBe8699013d6Dbc7C2b926Aaf307F830',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  // {\n  //   pid: 13,\n  //   risk: 1,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'BUSD',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x19e7cbecdd23a16dfa5573df54d98f7caae03019', // EGG-BUSD LP (BUSD-BUSD will ignore)\n  //   },\n  //   tokenSymbol: 'BUSD',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 14,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'WBNB',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\n  //   },\n  //   tokenSymbol: 'WBNB',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 15,\n  //   risk: 1,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'USDT',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd', // USDT-BUSD LP\n  //   },\n  //   tokenSymbol: 'USDT',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x55d398326f99059ff775485246999027b3197955',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 16,\n  //   risk: 2,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'BTCB',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xb8875e207ee8096a929d543c9981c9586992eacb', // BTCB-BUSD LP\n  //   },\n  //   tokenSymbol: 'BTCB',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 17,\n  //   risk: 2,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'ETH',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xd9a0d1f5e02de2403f68bb71a15f8847a854b494', // ETH-BUSD LP\n  //   },\n  //   tokenSymbol: 'ETH',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 18,\n  //   risk: 1,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'DAI',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x3ab77e40340ab084c3e23be8e5a6f7afed9d41dc', // DAI-BUSD LP\n  //   },\n  //   tokenSymbol: 'DAI',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 19,\n  //   risk: 1,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'USDC',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x680dd100e4b394bda26a59dd5c119a391e747d18', // USDC-BUSD LP\n  //   },\n  //   tokenSymbol: 'USDC',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 20,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'DOT',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x54c1ec2f543966953f2f7564692606ea7d5a184e', // DOT-BUSD LP\n  //   },\n  //   tokenSymbol: 'DOT',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 21,\n  //   risk: 4,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'CAKE',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458', // CAKE-BUSD LP\n  //   },\n  //   tokenSymbol: 'CAKE',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 22,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'BSCX',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0xa32a983a64ce21834221aa0ad1f1533907553136', // BSCX-BUSD LP\n  //   },\n  //   tokenSymbol: 'BSCX',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0x5ac52ee5b2a633895292ff6d8a89bb9190451587',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 23,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'AUTO',\n  //   lpAddresses: {\n  //     97: '',\n  //     56: '0x4d0228ebeb39f6d2f29ba528e2d15fc9121ead56', // AUTO-BNB LP\n  //   },\n  //   tokenSymbol: 'AUTO',\n  //   tokenAddresses: {\n  //     97: '',\n  //     56: '0xa184088a740c695e156f91f5cc086a06bb78b827',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n]\n\nexport default farms\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, momoPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'momoPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        momoPerBlock: new BigNumber(momoPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport cakeABI from 'config/abi/cake.json'\nimport wbnbABI from 'config/abi/weth.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getWbnbAddress } from 'utils/addressHelpers'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: poolConfig.contractAddress[CHAIN_ID],\n      name: 'startBlock',\n    }\n  })\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: poolConfig.contractAddress[CHAIN_ID],\n      name: 'bonusEndBlock',\n    }\n  })\n\n  const starts = await multicall(sousChefABI, callsStartBlock)\n  const ends = await multicall(sousChefABI, callsEndBlock)\n\n  return poolsWithEnd.map((cakePoolConfig, index) => {\n    const startBlock = starts[index]\n    const endBlock = ends[index]\n    return {\n      sousId: cakePoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON(),\n    }\n  })\n}\n\nexport const fetchPoolsTotalStatking = async () => {\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\n  const bnbPool = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\n\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\n    return {\n      address: poolConfig.stakingTokenAddress,\n      name: 'balanceOf',\n      params: [poolConfig.contractAddress[CHAIN_ID]],\n    }\n  })\n\n  const callsBnbPools = bnbPool.map((poolConfig) => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [poolConfig.contractAddress[CHAIN_ID]],\n    }\n  })\n\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\n\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\n    })),\n    ...bnbPool.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\n    })),\n  ]\n}\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingMomo('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n  console.log('alex: total ', totalStakings)\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 0; // EGG-BUSD LP\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n    }\n  }\n  return value;\n}","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n\n    .land_background {\n      width: 100%;\n      position: fixed;\n      display: block;\n      z-index: -1;\n    }\n\n    .port_background {\n      width: 100%;\n      position: fixed;\n      display: none;\n      z-index: -1;\n    }    \n\n    @media screen and (max-width: 968px) {\n      .land_background {\n        display: none;\n      }\n\n      .port_background {\n        display: block;\n      }\n    }\n  }\n`\n\nexport default GlobalStyle\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <img src=\"logo.png\" alt=\"logo\" width=\"150px\" height=\"150px\"/>\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n\nconst Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <div id=\"background\" >\n        <img src=\"images/background_land.svg\" alt=\"land_background\" className=\"land_background\" />\n        <img src=\"images/background_port.svg\" alt=\"port_background\" className=\"port_background\" />\n      </div>\n      <Suspense fallback={<PageLoader />}>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Ifos />\n          </Route>\n          <Route component={NotFound} />\n        </Switch>\n      </Suspense>\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n"],"sourceRoot":""}